# Amazon Q pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"
# ------------------------------------------------------------------------------
# Zshrc
# ------------------------------------------------------------------------------
# This file configures all of the settings for zsh.
# Alias and Functions files are sourced from external paths.
# Plugins were installed via brew.
#   -- brew install zsh-autosuggestions zsh-syntax-highlighting z.lua

# zmodload zsh/zprof

# ------------------------------------------------------------------------------
# Paths
# ------------------------------------------------------------------------------

export PATH=${PATH}:/bin
export PATH=${PATH}:/opt/homebrew/lib
export PATH=${PATH}:/sbin
export PATH=${PATH}:/usr/bin
export PATH=${PATH}:/usr/local/aws/bin
export PATH=${PATH}:/usr/local/bin
export PATH=${PATH}:/usr/local/opt
export PATH=${PATH}:/usr/local/opt/coreutils/libexec/gnubin
export PATH=${PATH}:/usr/local/sbin
export PATH=${PATH}:/usr/sbin
export PATH=${PATH}:~/.composer/vendor/bin
export PATH=${PATH}:~/.dotfiles/bin
export PATH=${PATH}:~/.dotfiles/bin/apache-maven-3.9.9/bin
export PATH=${PATH}:~/.dotfiles/bin/jdt-java-lang-server/bin
export PATH=${PATH}:~/.local/bin
export PATH=${PATH}:~/.rbenv/versions/bin
export PATH=${PATH}:~/nvim-osx64/bin
export PATH=${PATH}:/opt/homebrew/opt/node@18/bin
export PATH=${PATH}:~/go/bin
export PATH=${PATH}:/opt/homebrew/opt/mysql-client/bin

# ------------------------------------------------------------------------------
# General Settings
# ------------------------------------------------------------------------------

export EDITOR=nvim
# export VISUAL=nvim
# export PAGER=more
export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=YES # Required for iterm shell integration
export LANG=en_US.UTF-8
# HISTSIZE=10000
# SAVEHIST=10000
# HISTFILE=~/.cache/zsh/history
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
export SAM_CLI_TELEMETRY=0

# ------------------------------------------------------------------------------
# AWS Code Artifact Token
# Used to publish and pull from private NPM repositories
# ------------------------------------------------------------------------------

# export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain converge --domain-owner 420280777025 --region us-east-1 --query authorizationToken --output text`


# ------------------------------------------------------------------------------
# Source External ZSH Files
# ------------------------------------------------------------------------------

source $HOME/dotfiles/zsh/custom/functions.zsh
source $HOME/dotfiles/zsh/custom/aliases.zsh

# ------------------------------------------------------------------------------
# TMUX
# ------------------------------------------------------------------------------
# Exit if inside Visual Studio Code's terminal or already in a tmux session
# if [ "$TERM_PROGRAM" = "vscode" ] || [ -n "$TMUX" ]; then
#   exit 0
# fi

# # Attempt to list tmux sessions. If successful, prompt user to select one, else create a new one.
# if tmux ls 2>/dev/null; then
#   echo "Enter the name of the tmux session to attach to (or press Enter to select the first one):"
#   read -r tmux_session
#   # If user did not enter a name, select the first session automatically
#   if [ -z "$tmux_session" ]; then
#     tmux_session=$(tmux ls | cut -d: -f1 | head -n1)
#   fi
#   tmux attach -t "$tmux_session" 2>/dev/null || tmux new -s "$tmux_session"
# else
#   echo "No existing tmux sessions. Creating a new one."
#   # Prompt for session name in case of creating a new one
#   read -r tmux_session
#   if [ -z "$tmux_session" ]; then
#     # Default session name if none is provided
#     tmux_session="default"
#   fi
#   tmux new -s "$tmux_session"
# fi
# ------------------------------------------------------------------------------
# Auto-Tab / Completion
# ------------------------------------------------------------------------------

autoload -Uz compinit
zstyle ':completion:*' verbose yes
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # case-insensitive completion
zmodload zsh/complist
compinit
_comp_options+=(globdots)               # Include hidden files.

autoload bashcompinit && bashcompinit
complete -C '/usr/local/bin/aws_completer' aws

# ------------------------------------------------------------------------------
# Starship Prompt
# ------------------------------------------------------------------------------

eval "$(starship init zsh)"


# ------------------------------------------------------------------------------
# Vim Mode
# ------------------------------------------------------------------------------

bindkey -v '^?' backward-delete-char # Enable vim mode in zsh
export KEYTIMEOUT=1 # Remove mode switching delay.

# Use HJKL in auto-complete menu selection
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Edit line in Vim with CTRL-E
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line


# ------------------------------------------------------------------------------
# Z.lua Jump to Directory
# ------------------------------------------------------------------------------

# eval "$(lua /opt/homebrew/Cellar/z.lua/1.8.16/share/z.lua/z.lua --init zsh)"

# export _ZL_ROOT_MARKERS=".git,package.json,composer.json" # Jump to project root with zb


# ------------------------------------------------------------------------------
# Fzf Config
# ------------------------------------------------------------------------------

export FZF_DEFAULT_COMMAND='ag -u -g ""'
export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
export FZF_DEFAULT_OPTS='--preview-window right:50%:noborder:hidden --color "preview-bg:234" --bind "alt-p:toggle-preview"'


# ------------------------------------------------------------------------------
# Fzf Installer Generated Config
# ------------------------------------------------------------------------------

# Setup fzf
if [[ ! "$PATH" == */usr/local/opt/fzf/bin* ]]; then
  export PATH="${PATH:+${PATH}:}/usr/local/opt/fzf/bin"
fi

# Auto-completion
[[ $- == *i* ]] && source "/opt/homebrew/Cellar/fzf/0.57.0/shell/completion.zsh" 2> /dev/null

# GitHub CLI completion
# eval "$(gh completion -s zsh)"

# Key bindings
source "/opt/homebrew/Cellar/fzf/0.57.0/shell/key-bindings.zsh"

# ------------------------------------------------------------------------------
# Auto Suggest Settings
# ------------------------------------------------------------------------------

ZSH_AUTOSUGGEST_STRATEGY=(history completion) # First search history, then directory
ZSH_AUTOSUGGEST_USE_ASYNC=true

# Source autosuggestion plugin
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh 2>/dev/null

# ------------------------------------------------------------------------------
# FZF
# ------------------------------------------------------------------------------

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# ------------------------------------------------------------------------------
# FNM Fast Node Manager
# ------------------------------------------------------------------------------

eval "$(fnm env --use-on-cd --shell zsh)"


# ------------------------------------------------------------------------------
# Auto Suggest Settings (Needs to be last)
# ------------------------------------------------------------------------------

export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/usr/local/share/zsh-syntax-highlighting/highlighters

# source $HOME/dotfiles/zsh/custom/artisan.plugin.zsh

# Source syntax highlighting plugin
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null


# tabtab source for packages
# uninstall by removing these lines
# [[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true

# source /Users/jose/.docker/init-zsh.sh || true # Added by Docker Desktop

# export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_351.jdk/Contents/Home"
export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home"

# Amazon Q post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"
