" vim:foldmethod=marker:foldlevel=0
"
" -----------------------------------------------------------------------------
" File: ~/dotfiles/vim/vimrc
" Description: Base configuration settings for Vim
" Author: Jose Soto <josecanhelp@gmail.com>
" Source: https://github.com/josecanhelp/dotfiles
" Last Modified: 18 May 2020
" -----------------------------------------------------------------------------

" Custom Functions  -----------------------------------------------------------
" DotVimPath: {{{
" Get path relative to .vim directory
function! DotVimPath(path)
  return g:dotvim_path . '/' . a:path
endfunction
" }}}
" EditVimConfig: {{{
function! EditVimConfig(file)
  execute 'edit ' . VimrcPath(a:file)
endfunction
" }}}
" VimrcPath: {{{
" Get path relative to .vimrc file
function! VimrcPath(path)
  return g:dotfiles_path . '/vim/' . a:path
endfunction
" }}}
" General --------------------------------------------------------------------
" Defaults: {{{

let mapleader = "\<Space>"

unlet! skip_defaults_vim
silent! source $VIMRUNTIME/defaults.vim
syntax on
filetype plugin on
colorscheme gruvbox
set autowrite  " Save on buffer switch
set background=dark
set backspace=indent,eol,start
set clipboard=unnamed " yanked content is copied to the clipboard
set expandtab
set hlsearch " Highlight searches
set ignorecase " Ignore case of search
set incsearch " Highlight dynamically as pattern is typed
set mouse=a " Enable mouse scroll
set nocursorline " Highlight current line
set noswapfile
set nowrap " Do not wrap the end of the line
set number " Enable line numbers
set relativenumber " Make the line numbers display relative numbers
set shiftwidth=2
set showmode " Show the current mode
set splitbelow " Open new files in horizontal splits to the bottom
set splitright " Open new files in vertical splits to the right
set tabstop=2
set wildignore+=*/vendor/** " Ignore these folders during fuzzy search
set runtimepath+=/usr/local/opt/fzf
set tags=.git/tags
set scrolloff=7 " Add padding to the bottom of the file
" }}}
" Theme: {{{
" Set the cursorline highlight colors
hi CursorLine cterm=NONE ctermbg=darkyellow ctermfg=white guibg=lightblue guifg=white
" }}}
" Paths: {{{
" Parent paths
let g:dotfiles_path = $HOME . '/.dotfiles'
let g:dotvim_path = $HOME . '/.vim'

" Vimrc related paths for autocmds
let g:vimrc_related_paths = [
  \ $MYVIMRC,
  \ VimrcPath('vimrc'),
  \ VimrcPath('*.vim')
  \ ]
" }}}
" Plugins --------------------------------------------------------------------
" Installed: {{{
call plug#begin('~/.vim/plugged')
Plug '/usr/local/opt/fzf'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-runner'
Plug 'dense-analysis/ale'
Plug 'git@github.com:morhetz/gruvbox.git'
Plug 'janko/vim-test'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'justinmk/vim-sneak'
Plug 'ludovicchabant/vim-gutentags'
Plug 'lumiliet/vim-twig'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'phpactor/phpactor', {'for': 'php', 'do': 'composer install --no-dev -o'}
Plug 'posva/vim-vue'
Plug 'prettier/vim-prettier', {'do': 'npm install', 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'skywind3000/asyncrun.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-vdebug/vdebug', {'on': ['Breakpoint', 'VdebugStart']}
Plug 'yuezk/vim-js'
call plug#end()
"}}}
" Plugin Settings ------------------------------------------------------------
" Airline: {{{
" Show Ale errors and warnings in Airline status bar
let g:airline#extensions#ale#enabled = 1
" }}}
" Ale: {{{
let g:ale_sign_column_always = 1
let g:ale_sign_error = '!!'
let g:ale_sign_style_error = '!!'
let g:ale_sign_warning = '!'
let g:ale_sign_style_warning = '!'
" Linters: {{{
  let g:ale_linters = {
    \ 'php': ['php', 'phpcs', 'phpmd'],
    \ }

  let g:ale_php_phpcs_standard = 'PSR2'
" }}}
" Fixers: {{{
  let g:ale_fixers = {
    \ 'php': ['php_cs_fixer'],
    \ }

  augroup fix_on_save
    autocmd! *
    autocmd BufEnter *.php call s:fix_php()
  augroup END

  function! s:fix_php()
    if filereadable('.php_cs.dist')
      let b:ale_fix_on_save = 1
    endif
  endfunction
" }}}
" }}}
" Nerdtree: {{{
let g:NERDTreeShowHidden=1
let g:NERDSpaceDelims = 1 " Add spaces after comment delimiters by default
let g:NERDCompactSexyComs = 1 "  Use compact syntax for prettified multi-line comments
let g:NERDDefaultAlign = 'left' " Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDAltDelims_java = 1 " Set a language to use its alternate delimiters by default
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } } " Add your own custom formats or override the defaults
let g:NERDCommentEmptyLines = 1 " Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting
" }}}
" Peekaboo: {{{
let g:peekaboo_window = 'vertical botright 80new'
" }}}
" Phpactor: {{{
let g:phpactorPhpBin = 'php'
let g:phpactorBranch = 'master'
let g:phpactorOmniAutoClassImport = v:true
let g:phpactorOmniError = v:true
let g:polyglot_disabled = ['jsx']
let g:vim_jsx_pretty_colorful_config = 1
" }}}
" Prettier: {{{
let g:prettier#exec_cmd_path = '~/.nvm/versions/node/v8.16.0/bin/prettier'
" }}}
" Sneak: {{{
let g:sneak#label = 1
" }}}
" Vim-Javascript: {{{
" Let vim-javascript detect which pre-processors to check for
let g:vue_pre_processors = 'detect_on_enter'
" }}}
" Vim-Test: {{{
let test#enabled_runners = ["php#phpunit"]
let test#strategy = "vtr"
" }}}
" Mappings  -------------------------------------------------------------------
" General: {{{
" Re-source vimrc
nnoremap <Leader>r :source $MYVIMRC<CR>
" Easy escaping to normal model
imap jj <esc>
cnoremap jj <C-c>
" Toggle the cursor line highlighting
nnoremap <Leader>h :set cursorline!<CR>
" Clear the highlighted search results
nnoremap <Leader><space> :noh<CR>
" }}}
" Fuzzy Finders: {{{
map <C-p> :GFiles<cr>
"}}}
" Write: {{{
nmap <D-s> <Esc>:w<CR>
map <M-s> <Esc>:w<CR>
map <C-s> <Esc>:w<CR>
map <leader>w :w!<cr>
"}}}
" Window Management: {{{
nmap vs :vsplit<cr>
nmap sp :split<cr>
"}}}
" Plugin Specific Mapping: {{{
 " Nerdtree: {{{
    map <C-n> :NERDTreeToggle<CR>
 " }}}
 " Phpactor: {{{
    " Include use statement
    nmap <Leader>u :call phpactor#UseAdd()<CR>
    " Invoke the context menu
    nmap <Leader>mm :call phpactor#ContextMenu()<CR>
    " Invoke the navigation menu
    nmap <Leader>nn :call phpactor#Navigate()<CR>
    " Goto definition of class or class member under the cursor
    nmap <Leader>o :call phpactor#GotoDefinition()<CR>
    " Show brief information about the symbol under the cursor
    nmap <Leader>K :call phpactor#Hover()<CR>
    " Transform the classes in the current file
    nmap <Leader>tt :call phpactor#Transform()<CR>
    " Generate a new class (replacing the current file)
    nmap <Leader>cc :call phpactor#ClassNew()<CR>
    " Extract expression (normal mode)
    nmap <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>
    " Extract expression from selection
    vmap <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>
    " Extract method from selection
    vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>
 " }}}
"}}}
" Custom Commands -------------------------------------------------------------
" Editing: {{{
command! EditVimrc call EditVimConfig('vimrc')
command! EditVimMappings call EditVimConfig('mappings.vim')
" }}}
" AutoCommands ----------------------------------------------------------------
" General: {{{
augroup nerdtree_avoid_overlap
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

augroup phpactor_autocomplete_php
  autocmd FileType php setlocal omnifunc=phpactor#Complete
augroup END
" }}}

" ------------------------------------------------------------------------------
" # Mappings
" ------------------------------------------------------------------------------
" Repeat macros for all selected lines
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo '@'.getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction
" end repeat macros for all selected lines

nmap <Leader><Leader>v :EditVimrc<CR>
nmap <Leader><Leader>vm :EditVimMappings<CR>

" Run tests
" Plugin: test
nmap <Leader>rt :w<CR>:TestToggleStrategy<CR>
nmap <Leader>rs :w<CR>:TestSuite<CR>
nmap <Leader>rf :w<CR>:TestFile<CR>
nmap <Leader>rl :w<CR>:TestLast<CR>
nmap <Leader>rn :w<CR>:TestNearest<CR>
nmap <Leader>rv :w<CR>:TestVisit<CR>

" Debugger
" Plugin: vdebug
nnoremap <Leader>B :Breakpoint<CR>
nnoremap <Leader>V :VdebugStart<CR>
